// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package btc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BTCServiceClient is the client API for BTCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BTCServiceClient interface {
	NewSegwit(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SegwitResponse, error)
	SegwitFromMnemonic(ctx context.Context, in *MnemonicPost, opts ...grpc.CallOption) (*SegwitResponse, error)
	SegwitFromSeed(ctx context.Context, in *SeedPost, opts ...grpc.CallOption) (*SegwitResponse, error)
	MultiSig(ctx context.Context, in *MultiSigPost, opts ...grpc.CallOption) (*MultiSigResponse, error)
}

type bTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBTCServiceClient(cc grpc.ClientConnInterface) BTCServiceClient {
	return &bTCServiceClient{cc}
}

func (c *bTCServiceClient) NewSegwit(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SegwitResponse, error) {
	out := new(SegwitResponse)
	err := c.cc.Invoke(ctx, "/btc.BTCService/NewSegwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCServiceClient) SegwitFromMnemonic(ctx context.Context, in *MnemonicPost, opts ...grpc.CallOption) (*SegwitResponse, error) {
	out := new(SegwitResponse)
	err := c.cc.Invoke(ctx, "/btc.BTCService/SegwitFromMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCServiceClient) SegwitFromSeed(ctx context.Context, in *SeedPost, opts ...grpc.CallOption) (*SegwitResponse, error) {
	out := new(SegwitResponse)
	err := c.cc.Invoke(ctx, "/btc.BTCService/SegwitFromSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCServiceClient) MultiSig(ctx context.Context, in *MultiSigPost, opts ...grpc.CallOption) (*MultiSigResponse, error) {
	out := new(MultiSigResponse)
	err := c.cc.Invoke(ctx, "/btc.BTCService/MultiSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BTCServiceServer is the server API for BTCService service.
// All implementations must embed UnimplementedBTCServiceServer
// for forward compatibility
type BTCServiceServer interface {
	NewSegwit(context.Context, *EmptyPost) (*SegwitResponse, error)
	SegwitFromMnemonic(context.Context, *MnemonicPost) (*SegwitResponse, error)
	SegwitFromSeed(context.Context, *SeedPost) (*SegwitResponse, error)
	MultiSig(context.Context, *MultiSigPost) (*MultiSigResponse, error)
	mustEmbedUnimplementedBTCServiceServer()
}

// UnimplementedBTCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBTCServiceServer struct {
}

func (UnimplementedBTCServiceServer) NewSegwit(context.Context, *EmptyPost) (*SegwitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSegwit not implemented")
}
func (UnimplementedBTCServiceServer) SegwitFromMnemonic(context.Context, *MnemonicPost) (*SegwitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegwitFromMnemonic not implemented")
}
func (UnimplementedBTCServiceServer) SegwitFromSeed(context.Context, *SeedPost) (*SegwitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegwitFromSeed not implemented")
}
func (UnimplementedBTCServiceServer) MultiSig(context.Context, *MultiSigPost) (*MultiSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSig not implemented")
}
func (UnimplementedBTCServiceServer) mustEmbedUnimplementedBTCServiceServer() {}

// UnsafeBTCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BTCServiceServer will
// result in compilation errors.
type UnsafeBTCServiceServer interface {
	mustEmbedUnimplementedBTCServiceServer()
}

func RegisterBTCServiceServer(s grpc.ServiceRegistrar, srv BTCServiceServer) {
	s.RegisterService(&BTCService_ServiceDesc, srv)
}

func _BTCService_NewSegwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTCServiceServer).NewSegwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.BTCService/NewSegwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTCServiceServer).NewSegwit(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTCService_SegwitFromMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnemonicPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTCServiceServer).SegwitFromMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.BTCService/SegwitFromMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTCServiceServer).SegwitFromMnemonic(ctx, req.(*MnemonicPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTCService_SegwitFromSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTCServiceServer).SegwitFromSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.BTCService/SegwitFromSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTCServiceServer).SegwitFromSeed(ctx, req.(*SeedPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTCService_MultiSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSigPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTCServiceServer).MultiSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.BTCService/MultiSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTCServiceServer).MultiSig(ctx, req.(*MultiSigPost))
	}
	return interceptor(ctx, in, info, handler)
}

// BTCService_ServiceDesc is the grpc.ServiceDesc for BTCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BTCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btc.BTCService",
	HandlerType: (*BTCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSegwit",
			Handler:    _BTCService_NewSegwit_Handler,
		},
		{
			MethodName: "SegwitFromMnemonic",
			Handler:    _BTCService_SegwitFromMnemonic_Handler,
		},
		{
			MethodName: "SegwitFromSeed",
			Handler:    _BTCService_SegwitFromSeed_Handler,
		},
		{
			MethodName: "MultiSig",
			Handler:    _BTCService_MultiSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btc/btc.proto",
}
